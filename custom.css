/* display: flex

1. In the <div> with id flex, add a display property with a value of flex. Compare the two divs in the browser.

body {
  margin: 0;
  border: 0;
  font-family: 'Roboto Mono', monospace;
}

h1 {
  font-size: 18px;
  text-align: center;
}

h2 {
  font-size: 16px;
  text-align: center;
}

.container {
  background-color: whitesmoke;
}

.box {
  background-color: dodgerblue;
  height: 100px;
  width: 100px;
  border: 1px solid lightgrey;
}

#flex {
    display: flex;
} */




/* inline-flex

1.In the .container ruleset, set the display property to inline-flex.

body {
  margin: 0;
  border: 0;
  font-family: 'Roboto Mono', monospace;
  text-align: center;
}

h1 {
  font-size: 18px;
  text-align: center;
}

.container {
    display: inline-flex;
  width: 150px;
  border: 1px solid grey;
}

.box {
  background-color: dodgerblue;
  height: 75px;
  width: 75px;
  border: 1px solid turquoise;
} */



/* justify-content

1. Assign the <div> element with the id flexstart a justify-content property with a value of flex-start.

You won’t see any changes since flex-start is the default value;

2. Assign the <div> element with the id flexend a justify-content property with a value of flex-end.

3. Assign the <div> element with the id center a justify-content property with a value of center.

4. Assign the <div> element with the id spacearound a justify-content property with a value of space-around.

Stretch and shrink the browser window to compare and contrast how the elements in each div behave.

5. Assign the <div> element with the id spacebetween a justify-content property with a value of space-between.


body {
  border: 0;
  margin: 0;
  font-family: 'Roboto Mono', monospace;
}

h1 {
  text-align: center;
  display: block;
  font-size: 18px;
}

.container {
  height: 150px;
  width: 100%;
  display: flex;
  background-color: whitesmoke;
}

.box {
  height: 75px;
  width: 100px;
  background-color: dodgerblue;
  border: 1px solid lightgrey;
  display: inline-block;
}

#flexstart {
    justify-content: flex-start;
}

#flexend {
    justify-content: flex-end;
}

#center {
    justify-content: center;
}

#spacearound {
    justify-content: space-around;
}

#spacebetween {
    justify-content: space-between;
} */


/* align-items

1. Assign the <div> element with id flexstart an align-items property with the value flex-start.

2. Assign the <div> element with id flexend an align-items property with the value flex-end.

3. Assign the <div> element with id center an align-items property with the value center.

4. Assign the <div> element with id baseline an align-items property with the value baseline. How does the behavior of these elements differ from those in other divs?

5. Take a look at the elements under “Stretch” at the bottom of the page. Now, in the .left, .center, .right ruleset, change the height property to min-height and observe what happens to these elements.


body {
  font-family: 'Roboto Mono', monospace;
}

h1 {
  margin: 20px;
  text-align: center;
  font-size: 18px;
}

.container {
  height: 150px;
  background-color: whitesmoke;
  display: flex;
  justify-content: center;
}

.left,
.center,
.right {
  height: 75px;
  width: 125px;
  background-color: dodgerblue;
  border: 2px solid lightgrey;
}

#baseline .center {
  height: 100px;
  width: 100px;
  border: 5px solid turquoise;
}

#flexstart {
    align-items: flex-start;
}

#flexend {
    align-items: flex-end;
}

#center {
    align-items: center;
}

#baseline {
    align-items: baseline;
} */


/* flex-grow

1. Assign .top.side and .top.center a flex-grow value of 1. Stretch and shrink the browser.

2. Assign .middle.center the flex-grow value of 1. Stretch and shrink the browser again.

3. Assign .bottom.side a flex-grow value of 1 and .bottom.center a flex-grow value of 2. Shrink and stretch the browser again. Compare the differences in behavior of all three sections.


body {
  margin: 0;
  border: 0;
  font-family: 'Roboto Mono', monospace;
}

h1 {
  font-size: 18px;
}

h2 {
  font-size: 16px;
}

h1,
h2 {
  text-align: center;
}

.top,
.middle,
.bottom {
  width: 100px;
  height: 100px;
  background-color: dodgerblue;
  border: 2px solid lightgrey;
  margin: 10px 30px;
}

.top.side {
    flex-grow: 1;
}

.top.center {
    flex-grow: 1;
}

.middle.side {

}

.middle.center {
    flex-grow: 1;
}

.bottom.side {
    flex-grow: 1;
}

.bottom.center {
	flex-grow: 2;
}

#top,
#middle,
#bottom {
  display: flex;
  background-color: Whitesmoke;
  justify-content: center;
  min-height: 200px;
  align-items: center;
} */


/* flex-shrink

1. Assign .top.side a flex-shrink value of 2.

Stretch and shrink the browser. Because the default value for flex-shrink is 1, the .top.center div will shrink but not as much as the .side divs.

2. Assign .middle.side a flex-shrink value of 0.

Stretch and shrink the browser. How do the .middle divs resize differently than the .top divs?

3. Assign the .bottom.center div a flex-shrink value of 2.

Shrink and stretch the browser again. How do the .bottom divs resize differently than the .top and .middle divs?


body {
  margin: 0;
  border: 0;
  font-family: 'Roboto Mono', monospace;
}

h1 {
  font-size: 18px;
}

h2 {
  font-size: 16px;
}

h1,
h2 {
  text-align: center;
}

.top,
.middle,
.bottom {
  width: 100px;
  height: 100px;
  background-color: dodgerblue;
  border: 2px solid lightgrey;
  margin: 10px 30px;
}

.top.side {
    flex-shrink: 2;
}

.top.center {

}

.middle.side {
    flex-shrink: 0;
}

.middle.center {

}

.bottom.side {

}

.bottom.center {
	flex-shrink: 2;
}

#top,
#middle,
#bottom {
  display: flex;
  background-color: whitesmoke;
  justify-content: center;
  min-height: 200px;
  align-items: center;
} */



/* flex-basis

1. In style.css, inside the .grow.side ruleset, add a flex-basis of 60px.

2. In the same rule, add a flex-grow value of 1.

3. In the .grow.center rule, add a flex-grow property with a value of 3.

4. In the .shrink.side rule, add a flex-basis property with a value of 300px.

5. In the same rule, add a flex-shrink property with a value of 3.

6. In the .shrink.center rule, add a flex-shrink property with a value of 2.

7. In the same rule, add a flex-basis property with a value of 150px. Now stretch and shrink the browser.

body {
  margin: 0;
  border: 0;
  font-family: 'Roboto Mono', monospace;
}

h1 {
  text-align: center;
  font-size: 18px;
}

h2 {
  text-align: center;
  font-size: 16px;
}

.grow,
.shrink {
  width: 100px;
  height: 100px;
  background-color: dodgerblue;
  border: 2px solid lightgrey;
  margin: 10px 30px;
}

.grow.side {
  flex-basis: 60px;
  flex-grow: 1;
}

.grow.center {
  flex-grow: 3;
}

.shrink.side {
  flex-basis: 300px;
  flex-shrink: 3;
}

.shrink.center {
  flex-shrink: 2;
  flex-basis: 150px;
}

#grows,
#shrinks {
  display: flex;
  background-color: whitesmoke;
  justify-content: center;
  min-height: 200px;
  align-items: center;
}
*/


flex (shorthand)

1. In #top .side, all three values for flex-grow, flex-shrink, and flex-basis are assigned individually. Refactor them to be declared in one line using the shorthand flex property.

2. In #top .center, all three values for flex-grow, flex-shrink, and flex-basis are assigned individually. Refactor them to be declared in one line.

3. In #bottom .side, all three values for flex-grow, flex-shrink, and flex-basis are assigned individually. Refactor them to be declared in one line.

4. In #bottom .center, all three values for flex-grow, flex-shrink, and flex-basis are assigned individually. Refactor them to be declared in one line.


body {
  border: 0;
  margin: 0 15px;
  font-family: 'Roboto Mono', monospace;
}

h1 {
  text-align: center;
  display: block;
  font-size: 18px;
}

.container {
  height: 150px;
  width: 100%;
  display: flex;
  background-color: whitesmoke;
}

.side,
.center {
  height: 75px;
  background-color: dodgerblue;
  border: 1px solid lightgrey;
  display: inline-block;
}

#top .side {
  flex-grow: 2;
  flex-shrink: 2;
  flex-basis: 100px;
}

#top .center {
  flex-grow: 1;
  flex-shrink: 3;
  flex-basis: 50px;
}

#bottom .side {
  flex-grow: 1;
  flex-shrink: 2;
  flex-basis: 75px;
}

#bottom .center {
  flex-grow: 2;
  flex-shrink: 1;
  flex-basis: 100px;
}